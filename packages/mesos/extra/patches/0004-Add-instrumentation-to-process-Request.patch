From 621643d50a682b8b2d1131f0f6f87ba24d7eb4b5 Mon Sep 17 00:00:00 2001
From: Benno Evers <bevers@mesosphere.com>
Date: Wed, 23 May 2018 14:44:47 +0200
Subject: [PATCH] Add instrumentation to process::Request.

---
 3rdparty/libprocess/include/process/http.hpp | 18 +++++++++++++++++-
 3rdparty/libprocess/src/http.cpp             |  2 ++
 2 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/3rdparty/libprocess/include/process/http.hpp b/3rdparty/libprocess/include/process/http.hpp
index fa66b0fe2..50716308a 100644
--- a/3rdparty/libprocess/include/process/http.hpp
+++ b/3rdparty/libprocess/include/process/http.hpp
@@ -17,6 +17,7 @@
 #include <stdint.h>
 
 #include <atomic>
+#include <ctime>
 #include <initializer_list>
 #include <iosfwd>
 #include <memory>
@@ -517,7 +518,12 @@ public:
 struct Request
 {
   Request()
-    : keepAlive(false), type(BODY) {}
+    : keepAlive(false)
+    , type(BODY)
+    , requestNumber(counter++)
+  {
+    ::clock_gettime(CLOCK_MONOTONIC, &received);
+  }
 
   std::string method;
 
@@ -562,6 +568,14 @@ struct Request
   std::string body;
   Option<Pipe::Reader> reader;
 
+  // Temporary benchmarking support.
+  struct timespec received;
+  mutable struct timespec authorizing;
+  mutable struct timespec crunching;
+  mutable struct timespec serializing;
+  mutable struct timespec finished;
+  uint64_t requestNumber;
+
   /**
    * Returns whether the encoding is considered acceptable in the
    * response. See RFC 2616 section 14.3 for details.
@@ -585,6 +599,8 @@ struct Request
       const std::string& mediaType) const;
 
 private:
+  static std::atomic<uint64_t> counter;
+
   bool _acceptsMediaType(
       Option<std::string> name,
       const std::string& mediaType) const;
diff --git a/3rdparty/libprocess/src/http.cpp b/3rdparty/libprocess/src/http.cpp
index e9d439280..f2a5a8f30 100644
--- a/3rdparty/libprocess/src/http.cpp
+++ b/3rdparty/libprocess/src/http.cpp
@@ -86,6 +86,8 @@ using process::network::internal::SocketImpl;
 namespace process {
 namespace http {
 
+std::atomic<uint64_t> Request::counter;
+
 struct StatusDescription {
   uint16_t code;
   const char* description;
-- 
2.16.3

